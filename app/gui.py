
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import messagebox as popup
import turtle as t
from turtle import Canvas, RawTurtle, TurtleScreen

import bbdd as bd
import algoritmo as alg


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"..\build\assets\frame0")

 
primera_parada = True
segunda_parada = True
global origen, destino

origen_text = ""
destino_text = ""
path = []

global sc, pathwindow
global a 

sc = None

def motionVentana(event):
    x, y = event.x, event.y
    print('{}, {}'.format(x, y))
    
def iniciar():
    global path, sc, pathwindow, a, window
    global button_1, button_1_osc, button_2, button_2_osc
    #global origen, destino
    # Obtener camino óptimo
    #path = alg.aStarAlgo(origen, destino)
    window.wm_attributes('-disabled', True)
    path = alg.aStarAlgo(origen, destino)
    # Oscurecer ventana principal 
    canvas.itemconfigure(block, state='normal')
    # Button 1
    button_1.place_forget()
    button_1_block.place(
        x=189.0,
        y=662.0,
        width=222.0,
        height=78.0
    )
    # Button 2
    button_2.place_forget()
    button_2_block.place(
        x=191.0,
        y=754.0,
        width=222.0,
        height=78.0
    )
    window.bind('<Button 1>', errorWindow)

    # making turtle object
    sc = t.Screen()
    sc.title("Trayecto óptimo - " + origen.nombre + " a " + destino.nombre)
    a = t.RawTurtle(sc)
    a.hideturtle()
    pathwindow = sc.getcanvas().winfo_toplevel()
    pathwindow.resizable(0,0)
    #pathwindow.call('wm', 'attributes', '.', '-topmost', '1')
    pathwindow.protocol("WM_DELETE_WINDOW", on_close)
    pathwindow.grab_set()
    pathwindow.iconbitmap("build/assets/frame0/metro.ico")
    pathwindow.deiconify()

    # setup the screen size and center
    frm_width = window.winfo_rootx() - window.winfo_x()
    height = 900
    titlebar_height = window.winfo_rooty() - window.winfo_y()
    win_height = height + titlebar_height + frm_width
    y = window.winfo_screenheight()//2 - win_height//2
    sc.setup(820,900, startx = None, starty = y)
    # set the background color
    sc.bgpic("build/assets/frame0/image_5.png")

    """tcanvas = Canvas(
        pathwindow,
        height = 900,
        width = 820,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )
    tcanvas.create_oval(origen.printCoords[0]-7, origen.printCoords[1]-7, origen.printCoords[0] + 7, origen.printCoords[1] + 7, fill="black")
    tcanvas.create_oval(destino.printCoords[0]-7, destino.printCoords[1]-7, destino.printCoords[0] + 7, destino.printCoords[1] + 7, fill="black")"""
    sc.onclick(nose, btn=1)

    a.speed(0)
    a.hideturtle()
    a.pen(pensize=7)
    #a.shape("./build/assets/frame0/tren.png")
    a.color("black")
    #a.color('purple')
    a.penup()
    for p in path:
        #a.color(p.color)
        a.goto(p.printCoords[0], p.printCoords[1])
        a.speed(1.5)
        a.pendown()
    a.penup()
    a.hideturtle()

def on_close():
    close = popup.askokcancel("Confirmación de cierre de ventana", "Si cierras la ventana, se perderá el trayecto obtenido.\n¿Quieres continuar?", parent=pathwindow)
    if close:
        window.wm_attributes('-disabled', False)
        window.wm_attributes('-topmost', True)
        window.wm_attributes('-topmost', False)
        sc.reset()
        pathwindow.withdraw()
        reiniciar()

elements = []

def clean_elements():
    global elements
    for p in elements:
        canvas.delete(p)
    elements.clear()

def nose(x,y):
    print('{}, {}'.format(x, y))

def errorWindow(event):
    #popup.showerror("Uso denegado", "Cierre la ventana emergente antes de volver a la principal.")
    print("bloqueada")

def reiniciar():
    global primera_parada
    global segunda_parada
    clean_elements()
    canvas.itemconfigure(image_3, state='normal') # Seleccionar origen
    canvas.itemconfigure(image_3_blanco, state='hidden') # Seleccionar en blanco
    canvas.itemconfigure(image_1, state='hidden') # Seleccionar destino
    canvas.itemconfigure(image_2, state='hidden') # Destino del trayecto
    canvas.itemconfigure(image_8, state='hidden') # Puntos
    canvas.itemconfigure(image_1_blanco, state='hidden')
    button_1.place_forget()
    button_2.place_forget()
    canvas.itemconfigure(origen_text, state='hidden')
    canvas.itemconfigure(destino_text, state='hidden')
    primera_parada = True
    segunda_parada = True
    # Oscurecer ventana principal 
    canvas.itemconfigure(block, state='hidden')
    # Button 1
    button_1_block.place_forget()
    # Button 2
    button_2_block.place_forget()
    window.bind('<Button 1>', motion)
    a.hideturtle()


def motion(event):
    global primera_parada
    global segunda_parada
    global origen_text 
    global destino_text 
    global origen, destino
    x, y = event.x, event.y
    print('{}, {}'.format(x, y))
    parada = bd.which_stop(x,y)
    print(parada)
    if(primera_parada):
        if(parada is not None):
            canvas.itemconfigure(image_3, state='hidden')
            canvas.itemconfigure(image_3_blanco, state='normal')
            origen_text = canvas.create_text(
                151.0,
                358.0,
                anchor="nw",
                text=parada,
                fill="#222222",
                font=("Inter Medium", 18 * -1)
            )
            canvas.itemconfigure(image_1, state='normal')
            canvas.itemconfigure(image_2, state='normal')
            canvas.itemconfigure(image_8, state='normal')
            primera_parada = False
            origen = parada
            #origin = canvas.create_oval(x-7, y-7, x + 7, y + 7, fill="black")
            origin = canvas.create_oval(parada.coords[0]-7, parada.coords[1]-7, parada.coords[0] + 7, parada.coords[1] + 7, fill="black")
            elements.append(origin)
            
    elif(segunda_parada):
        if(parada is not None):
            if(parada == origen):
                popup.showwarning("Error en la selección de destino", "Has seleccionado la misma parada para el origen y destino. Por favor, selecciona otra parada.")
                #popup.showerror("Error en la selección de destino", "Has seleccionado la misma parada para el origen y destino. Por favor, selecciona otra parada.")
                return
            destino = parada
            canvas.itemconfigure(image_1, state='hidden')
            canvas.itemconfigure(image_1_blanco, state='normal')
            destino_text = canvas.create_text(
                151.0,
                576.0,
                anchor="nw",
                text=parada,
                fill="#222222",
                font=("Inter Medium", 18 * -1)
            )
            button_1.place(
                x=189.0,
                y=662.0,
                width=222.0,
                height=78.0
            )
            button_2.place(
                x=191.0,
                y=754.0,
                width=222.0,
                height=78.0
            )
            segunda_parada = False
            goal = canvas.create_oval(parada.coords[0]-7, parada.coords[1]-7, parada.coords[0] + 7, parada.coords[1] + 7, fill="black")
            elements.append(goal)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def center_window(window):
    window.update_idletasks()
    width = 1440
    frm_width = window.winfo_rootx() - window.winfo_x()
    win_width = width + 2*frm_width
    height = 900
    titlebar_height = window.winfo_rooty() - window.winfo_y()
    win_height = height + titlebar_height + frm_width
    x = window.winfo_screenwidth()//2 - win_width//2
    y = window.winfo_screenheight()//2 - win_height//2
    window.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    window.deiconify()

window = Tk()

window.bind('<Button 1>', motion)

# Centrar la ventana.
center_window(window)

window.title(" Atenas Underground") 

window.resizable(0,0) # Que no se pueda redimensionar

window.iconbitmap("build/assets/frame0/metro.ico")

window.geometry("1440x900")
window.configure(bg = "#494AA0")


canvas = Canvas(
    window,
    bg = "#494AA0",
    height = 900,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    301.0,
    586.0,
    image=image_image_1
)

canvas.itemconfigure(image_1, state='hidden')

image_image_1_blanco = PhotoImage(
    file=relative_to_assets("image_1_blanco.png"))
image_1_blanco = canvas.create_image(
    301.0,
    586.0,
    image=image_image_1_blanco
)

canvas.itemconfigure(image_1_blanco, state='hidden')

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    295.0,
    496.0,
    image=image_image_2
)

canvas.itemconfigure(image_2, state='hidden')

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    301.0,
    369.0,
    image=image_image_3
)

image_image_3_blanco = PhotoImage(
    file=relative_to_assets("image_1_blanco.png"))
image_3_blanco = canvas.create_image(
    301.0,
    369.0,
    image=image_image_3_blanco
)

canvas.itemconfigure(image_3_blanco, state='hidden')

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    295.0,
    279.0,
    image=image_image_4
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: iniciar(),
    relief="flat"
)

iniciar_block = PhotoImage(
    file=relative_to_assets("button_1_osc.png"))
button_1_block = Button(
    image=iniciar_block,
    borderwidth=0,
    highlightthickness=0,
    #command=lambda: iniciar(),
    relief="flat",
    #state="disabled"
)

"""button_1.place(
    x=189.0,
    y=662.0,
    width=222.0,
    height=78.0
)"""

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: reiniciar(),
    relief="flat"
)

reiniciar_block = PhotoImage(
    file=relative_to_assets("button_2_osc.png"))
button_2_block = Button(
    image=reiniciar_block,
    borderwidth=0,
    highlightthickness=0,
    #command=lambda: reiniciar(),
    relief="flat"
    #state="disabled"
)

"""button_2.place(
    x=191.0,
    y=754.0,
    width=222.0,
    height=78.0
)"""

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    1030.0,
    450.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    492.0,
    131.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    270.0,
    127.0,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    298.0,
    429.0,
    image=image_image_8
)

canvas.itemconfigure(image_8, state='hidden')

image_block = PhotoImage(
    file=relative_to_assets("blocked.png"))
block = canvas.create_image(
    1440/2,
    900/2,
    image=image_block
)

canvas.itemconfigure(block, state='hidden')

def on_closing():
    global sc
    if popup.askokcancel("Salir", "¿Estás seguro de que quieres salir del programa?"):
        if sc is not None:
            sc.bye()
        window.destroy()

window.protocol("WM_DELETE_WINDOW", on_closing)

window.mainloop()
